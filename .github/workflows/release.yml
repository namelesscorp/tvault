name: Build & Release (Tauri)

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

jobs:
    build:
        strategy:
            matrix:
                include:
                    # macOS
                    - os: macos-14
                      target: aarch64-apple-darwin
                      artifact_name: tvault-client_aarch64-apple-darwin
                    - os: macos-14
                      target: x86_64-apple-darwin
                      artifact_name: tvault-client_x86_64-apple-darwin

                    # Windows
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_name: tvault-client_x86_64-pc-windows-msvc
                    - os: windows-latest
                      target: i686-pc-windows-msvc
                      artifact_name: tvault-client_i686-pc-windows-msvc

                    # Linux x64
                    # - os: ubuntu-22.04
                    #   target: x86_64-unknown-linux-gnu
                    #   artifact_name: tvault-client_x86_64-unknown-linux-gnu

        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "yarn"

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Cache Cargo
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      src-tauri/target
                  key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

            - name: Install deps
              run: yarn --frozen-lockfile

            - name: Select Xcode
              if: startsWith(matrix.target, 'aarch64-apple-') || startsWith(matrix.target, 'x86_64-apple-')
              run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer

            - name: Install NSIS
              if: matrix.os == 'windows-latest'
              run: choco install nsis -y

            - name: Build (macOS signed & notarized)
              if: startsWith(matrix.target, 'aarch64-apple-') || startsWith(matrix.target, 'x86_64-apple-')
              env:
                  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              run: |
                  yarn tauri build --target ${{ matrix.target }}

            - name: Build (other)
              if: ${{ !(startsWith(matrix.target, 'aarch64-apple-') || startsWith(matrix.target, 'x86_64-apple-')) }}
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              run: |
                  yarn tauri build --target ${{ matrix.target }}

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_name }}
                  path: |
                      src-tauri/target/${{ matrix.target }}/release/bundle/**
                  if-no-files-found: error

    release:
        needs: build
        runs-on: ubuntu-22.04
        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: dist

            - name: Debug artifact contents
              run: |
                  echo "== DIST CONTENTS =="
                  find dist -maxdepth 4 -type f || true

            - name: Prepare release files
              run: |
                  VERSION_TAG="${GITHUB_REF_NAME}"
                  VERSION_NO_V="${VERSION_TAG#v}"
                  URL_BASE="https://github.com/${{ github.repository }}/releases/download/${VERSION_TAG}"

                  mkdir -p release

                  # Mac ARM
                  MAC_ARM_TGZ=$(find dist -name '*.app.tar.gz' | grep 'aarch64' | head -n1)
                  cp "$MAC_ARM_TGZ" "release/TrustVault_${VERSION_NO_V}_aarch64.app.tar.gz"

                  # Mac x64
                  MAC_X64_TGZ=$(find dist -name '*.app.tar.gz' | grep 'x86_64' | head -n1)
                  cp "$MAC_X64_TGZ" "release/TrustVault_${VERSION_NO_V}_x64.app.tar.gz"

                  # Windows x64
                  WIN_X64_EXE=$(find dist -name '*.exe' | grep 'x86_64' | head -n1)
                  cp "$WIN_X64_EXE" "release/TrustVault_${VERSION_NO_V}_x64-setup.exe"

                  # Windows x86
                  WIN_X86_EXE=$(find dist -name '*.exe' | grep 'i686' | head -n1)
                  cp "$WIN_X86_EXE" "release/TrustVault_${VERSION_NO_V}_x86-setup.exe"

                  # Signatures
                  sudo apt-get update -y
                  sudo apt-get install -y jq

                  SIG_MAC_ARM=$(jq -r '.platforms["darwin-aarch64"].signature' $(find dist -name updater.json | grep 'aarch64' | head -n1))
                  SIG_MAC_X64=$(jq -r '.platforms["darwin-x86_64"].signature' $(find dist -name updater.json | grep 'x86_64-apple' | head -n1))
                  SIG_WIN_X64=$(jq -r '.platforms["windows-x86_64"].signature' $(find dist -name updater.json | grep 'x86_64-pc-windows' | head -n1))
                  SIG_WIN_X86=$(jq -r '.platforms["windows-i686"].signature' $(find dist -name updater.json | grep 'i686' | head -n1))

                  cat > release/updater.json << EOF
                  {
                    "version": "${VERSION_NO_V}",
                    "notes": "Automatic update",
                    "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
                    "platforms": {
                      "darwin-aarch64": {
                        "signature": "${SIG_MAC_ARM}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_aarch64.app.tar.gz"
                      },
                      "darwin-x86_64": {
                        "signature": "${SIG_MAC_X64}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_x64.app.tar.gz"
                      },
                      "windows-x86_64": {
                        "signature": "${SIG_WIN_X64}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_x64-setup.exe"
                      },
                      "windows-i686": {
                        "signature": "${SIG_WIN_X86}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_x86-setup.exe"
                      }
                    }
                  }
                  EOF

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  files: release/*
                  draft: false
                  prerelease: ${{ contains(github.ref_name, '-') }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Commit updated updater.json
              shell: bash
              run: |
                  if [ -f release/updater.json ]; then
                    mkdir -p public
                    cp release/updater.json public/updater.json
                    git config --local user.email "action@github.com"
                    git config --local user.name "GitHub Action"
                    git pull --rebase
                    git add public/updater.json
                    git commit -m "Update updater.json for ${GITHUB_REF#refs/tags/}" || true
                    git push || true
                  fi
