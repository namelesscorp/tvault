name: Build & Release (Tauri)

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

jobs:
    build:
        strategy:
            matrix:
                include:
                    # macOS
                    - os: macos-14
                      target: aarch64-apple-darwin
                      artifact_name: tvault-client_aarch64-apple-darwin
                    - os: macos-14
                      target: x86_64-apple-darwin
                      artifact_name: tvault-client_x86_64-apple-darwin

                    # Windows
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_name: tvault-client_x86_64-pc-windows-msvc
                    - os: windows-latest
                      target: i686-pc-windows-msvc
                      artifact_name: tvault-client_i686-pc-windows-msvc

                    # Linux
                    - os: ubuntu-22.04
                      target: x86_64-unknown-linux-gnu
                      artifact_name: tvault-client_x86_64-unknown-linux-gnu
                    # - os: ubuntu-22.04
                    #   target: aarch64-unknown-linux-gnu
                    #   artifact_name: tvault-client_aarch64-unknown-linux-gnu

        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "yarn"

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Cache Cargo
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      src-tauri/target
                  key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

            - name: Install deps
              run: yarn --frozen-lockfile

            - name: Select Xcode
              if: startsWith(matrix.target, 'aarch64-apple-') || startsWith(matrix.target, 'x86_64-apple-')
              run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer

            - name: Install NSIS
              if: matrix.os == 'windows-latest'
              run: choco install nsis -y

            - name: Install Linux deps (only on Ubuntu)
              if: matrix.os == 'ubuntu-22.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                    build-essential \
                    libssl-dev \
                    libgtk-3-dev \
                    libayatana-appindicator3-dev \
                    librsvg2-dev \
                    libwebkit2gtk-4.1-dev \
                    libsoup-3.0-dev \
                    patchelf \
                    desktop-file-utils \
                    appstream

            - name: Build (macOS signed & notarized)
              if: startsWith(matrix.target, 'aarch64-apple-') || startsWith(matrix.target, 'x86_64-apple-')
              env:
                  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              run: |
                  yarn tauri build --target ${{ matrix.target }}

            - name: Build (Windows)
              if: matrix.os == 'windows-latest'
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              run: |
                  yarn tauri build --target ${{ matrix.target }}

            - name: Build (Linux)
              if: matrix.os == 'ubuntu-22.04'
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              run: |
                  yarn tauri build --target ${{ matrix.target }}

            - name: Debug secrets
              run: |
                  echo "KEY length: ${#TAURI_SIGNING_PRIVATE_KEY}"
                  if [ -n "$TAURI_SIGNING_PRIVATE_KEY_PASSWORD" ]; then echo "Password present"; else echo "Password MISSING"; fi
              shell: bash
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_name }}
                  path: |
                      src-tauri/target/${{ matrix.target }}/release/bundle/**
                  if-no-files-found: error

    release:
        needs: build
        runs-on: ubuntu-22.04
        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: dist

            - name: Show artifact tree (debug)
              shell: bash
              run: |
                  echo "== DIST CONTENTS =="
                  find dist -maxdepth 6 -type f | sed 's/^/  /' || true

            - name: Build updater.json from .sig and prepare curated assets
              shell: bash
              run: |
                  set -euo pipefail

                  VERSION_TAG="${GITHUB_REF_NAME}"
                  VERSION_NO_V="${VERSION_TAG#v}"
                  URL_BASE="https://github.com/${{ github.repository }}/releases/download/${VERSION_TAG}"

                  mkdir -p release

                  # --- locate macOS files ---
                  MAC_ARM_DMG=$(find dist -type f -path '*/dmg/*.dmg'          | grep -F 'aarch64-apple-darwin' | head -n1 || true)
                  MAC_X64_DMG=$(find dist -type f -path '*/dmg/*.dmg'          | grep -F 'x86_64-apple-darwin'  | head -n1 || true)
                  MAC_ARM_TGZ=$(find dist -type f -path '*/macos/*.app.tar.gz' | grep -F 'aarch64-apple-darwin' | head -n1)
                  MAC_X64_TGZ=$(find dist -type f -path '*/macos/*.app.tar.gz' | grep -F 'x86_64-apple-darwin'  | head -n1)
                  MAC_ARM_SIG="${MAC_ARM_TGZ}.sig"
                  MAC_X64_SIG="${MAC_X64_TGZ}.sig"

                  # --- locate Windows files ---
                  WIN_X64_EXE=$(find dist -type f -path '*/nsis/*.exe' | grep -F 'x86_64-pc-windows-msvc' | head -n1)
                  WIN_X86_EXE=$(find dist -type f -path '*/nsis/*.exe' | grep -F 'i686-pc-windows-msvc'   | head -n1)
                  WIN_X64_SIG="${WIN_X64_EXE}.sig"
                  WIN_X86_SIG="${WIN_X86_EXE}.sig"

                  # --- locate Linux files ---
                  LINUX_X64_TGZ=$(find dist -type f -path '*/appimage/*.AppImage.tar.gz' | grep -F 'x86_64-unknown-linux-gnu' | head -n1)
                  LINUX_X64_SIG="${LINUX_X64_TGZ}.sig"
                  LINUX_X64_BIN=$(find dist -type f -path '*/appimage/*.AppImage' | grep -F 'x86_64-unknown-linux-gnu' | head -n1 || true)

                  # --- required files must exist ---
                  for f in \
                    "$MAC_ARM_TGZ" "$MAC_X64_TGZ" \
                    "$MAC_ARM_SIG" "$MAC_X64_SIG" \
                    "$WIN_X64_EXE" "$WIN_X86_EXE" \
                    "$WIN_X64_SIG" "$WIN_X86_SIG" \
                    "$LINUX_X64_TGZ" "$LINUX_X64_BIN" \
                    "$LINUX_X64_SIG"
                  do
                    if [ ! -f "$f" ]; then echo "‚ùå Not found: $f"; exit 1; fi
                  done

                  if [ -n "${MAC_ARM_DMG:-}" ] && [ -f "$MAC_ARM_DMG" ]; then
                    cp "$MAC_ARM_DMG" "release/TrustVault_${VERSION_NO_V}_aarch64.dmg"
                  fi
                  if [ -n "${MAC_X64_DMG:-}" ] && [ -f "$MAC_X64_DMG" ]; then
                    cp "$MAC_X64_DMG" "release/TrustVault_${VERSION_NO_V}_x64.dmg"
                  fi

                  # --- copy curated install/update payloads ---
                  cp "$MAC_ARM_TGZ" "release/TrustVault_${VERSION_NO_V}_aarch64.app.tar.gz"
                  cp "$MAC_X64_TGZ" "release/TrustVault_${VERSION_NO_V}_x64.app.tar.gz"
                  cp "$WIN_X64_EXE" "release/TrustVault_${VERSION_NO_V}_x64-setup.exe"
                  cp "$WIN_X86_EXE" "release/TrustVault_${VERSION_NO_V}_x86-setup.exe"
                  cp "$LINUX_X64_TGZ" "release/TrustVault_${VERSION_NO_V}_x86_64.AppImage.tar.gz"
                  if [ -n "${LINUX_X64_BIN:-}" ] && [ -f "$LINUX_X64_BIN" ]; then
                    cp "$LINUX_X64_BIN" "release/TrustVault_${VERSION_NO_V}_x86_64.AppImage"
                  fi

                  # --- read signatures from .sig files ---
                  read_trim () { tr -d '\r\n' < "$1" | xargs echo -n; } # trim CR/LF + spaces
                  SIG_MAC_ARM="$(read_trim "$MAC_ARM_SIG")"
                  SIG_MAC_X64="$(read_trim "$MAC_X64_SIG")"
                  SIG_WIN_X64="$(read_trim "$WIN_X64_SIG")"
                  SIG_WIN_X86="$(read_trim "$WIN_X86_SIG")"
                  SIG_LINUX_X64="$(read_trim "$LINUX_X64_SIG")"

                  echo "== SIGNATURES =="
                  echo "darwin-aarch64 length: ${#SIG_MAC_ARM}"
                  echo "darwin-x86_64  length: ${#SIG_MAC_X64}"
                  echo "windows-x86_64 length: ${#SIG_WIN_X64}"
                  echo "windows-i686   length: ${#SIG_WIN_X86}"
                  echo "linux-x86_64  length: ${#SIG_LINUX_X64}"

                  # --- hard validation: signatures must be non-empty ---
                  [ -n "$SIG_MAC_ARM" ] || { echo "‚ùå empty signature darwin-aarch64"; exit 1; }
                  [ -n "$SIG_MAC_X64" ] || { echo "‚ùå empty signature darwin-x86_64";  exit 1; }
                  [ -n "$SIG_WIN_X64" ] || { echo "‚ùå empty signature windows-x86_64";  exit 1; }
                  [ -n "$SIG_WIN_X86" ] || { echo "‚ùå empty signature windows-i686";    exit 1; }
                  [ -n "$SIG_LINUX_X64" ] || { echo "‚ùå empty signature linux-x86_64";   exit 1; }

                  # --- write updater.json ---
                  cat > release/updater.json << EOF
                  {
                    "version": "${VERSION_NO_V}",
                    "notes": "Automatic update",
                    "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
                    "platforms": {
                      "darwin-aarch64": {
                        "signature": "${SIG_MAC_ARM}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_aarch64.app.tar.gz"
                      },
                      "darwin-x86_64": {
                        "signature": "${SIG_MAC_X64}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_x64.app.tar.gz"
                      },
                      "windows-x86_64": {
                        "signature": "${SIG_WIN_X64}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_x64-setup.exe"
                      },
                      "windows-i686": {
                        "signature": "${SIG_WIN_X86}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_x86-setup.exe"
                      },
                      "linux-x86_64": {
                        "signature": "${SIG_LINUX_X64}",
                        "url": "${URL_BASE}/TrustVault_${VERSION_NO_V}_x86_64.AppImage.tar.gz"
                      }
                    }
                  }
                  EOF

                  echo "== GENERATED updater.json =="
                  cat release/updater.json

            - name: Create GitHub Release (only curated files)
              uses: softprops/action-gh-release@v2
              with:
                  files: release/*
                  draft: false
                  prerelease: ${{ contains(github.ref_name, '-') }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

                  # - name: Checkout repo (for committing updater.json)
                  #   uses: actions/checkout@v4

                  # - name: Commit updated updater.json to repo
                  #   run: |
                  #       if [ -f release/updater.json ]; then
                  #         mkdir -p public
                  #         cp release/updater.json public/updater.json
                  #         git config --local user.email "action@github.com"
                  #         git config --local user.name "GitHub Action"
                  #         git pull --rebase
                  #         git add public/updater.json
                  #         git commit -m "Update updater.json for ${GITHUB_REF#refs/tags/}" || true
                  #         git push || true
                  #       fi
